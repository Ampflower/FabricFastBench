plugins {
    alias(libs.plugins.loom)
    alias(libs.plugins.minotaur)
    alias(libs.plugins.cursegradle)
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

final isPublish = System.getenv("GITHUB_EVENT_NAME") == "release"
final isRelease = System.getenv("BUILD_RELEASE")?.toBoolean() ?: false
final isActions = System.getenv("GITHUB_ACTIONS")?.toBoolean() ?: false
final baseVersion = "$projectVersion+mc.${libs.versions.minecraft.version.get()}"
version = isRelease ? baseVersion :
        isActions ? "$baseVersion-build.${System.getenv("GITHUB_RUN_NUMBER")}-commit.${System.getenv("GITHUB_SHA").substring(0, 7)}-branch.${System.getenv("GITHUB_REF")?.substring(11)?.replace('/', '.') ?: "unknown"}" :
                "$baseVersion-build.local"
group = project.maven_group

dependencies {
    minecraft(libs.minecraft)
    mappings(loom.officialMojangMappings())
    modImplementation(libs.fabric.loader)
    compileOnly(libs.bundles.compile)
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "java": java.targetCompatibility.majorVersion,
                "minecraftRequired": libs.versions.minecraft.required.get()
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.nio.charset.StandardCharsets

final ref = System.getenv("GITHUB_REF")
final String _changelog = System.getenv("CHANGELOG") ?:
        (ref != null && ref.startsWith("refs/tags/")) ?
                "You may view the changelog at https://github.com/Modflower/music-moods/releases/tag/${URLEncoder.encode(ref.substring(10), StandardCharsets.UTF_8)}" :
                "No changelog is available. Perhaps poke at https://github.com/Modflower/music-moods for a changelog?"

final type = System.getenv("RELEASE_OVERRIDE") ?:
        projectVersion?.contains("alpha") ? "alpha" :
                !isRelease || projectVersion.contains('-') ? "beta" :
                        "release"

final minecraftCompatible = libs.versions.minecraft.compatible.get().split(",").toList()

task curseforge(type: TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    final def mainFile = upload(curseforgeId, tasks.remapJar)

    // Parity of Modrinth to use the version as the display name
    mainFile.displayName = version
    mainFile.changelog = _changelog
    mainFile.changelogType = "markdown"
    mainFile.releaseType = type
    mainFile.addJavaVersion("Java " + java.targetCompatibility.majorVersion)
    mainFile.addGameVersion(*minecraftCompatible)
    mainFile.addEnvironment("Server")
    mainFile.addModLoader("Fabric", "Quilt")
}

modrinth {
    token.set(System.getenv("MODRINTH_TOKEN"))
    projectId.set(modrinthId)
    versionType.set(type)
    changelog.set(_changelog)
    uploadFile.set(tasks.remapJar)
    gameVersions.set(minecraftCompatible)
    loaders.addAll("fabric", "quilt")
}